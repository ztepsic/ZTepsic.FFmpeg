using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace ZTepsic.FFmpeg {
	/// <summary>
	/// Video resource information. (Value object)
	/// </summary>
	public class ResInfo {

		#region Members

		/// <summary>
		/// Author
		/// </summary>
		public string Author { get; private set; }

		/// <summary>
		/// Copyright
		/// </summary>
		public string Copyright { get; private set; }

		/// <summary>
		/// Description
		/// </summary>
		public string Description { get; private set; }

		/// <summary>
		/// Keywords
		/// </summary>
		public string Keywords { get; private set; }

		/// <summary>
		/// Rating
		/// </summary>
		public string Rating { get; private set; }

		/// <summary>
		/// Title
		/// </summary>
		public string Title { get; private set; }

		/// <summary>
		/// Preset name
		/// </summary>
		public string PresetName { get; private set; }

		/// <summary>
		/// Creation date
		/// </summary>
		public string CreationDate { get; private set; }

		/// <summary>
		/// Video device
		/// </summary>
		public string VideoDevice { get; private set; }

		/// <summary>
		/// Avc level
		/// </summary>
		public decimal AvcLevel { get; private set; }

		/// <summary>
		/// Avc profile
		/// </summary>
		public decimal AvcProfile { get; private set; }

		/// <summary>
		/// Video key frame frequency
		/// </summary>
		public decimal VideoKeyFrameFrq { get; private set; }

		/// <summary>
		/// Audio device
		/// </summary>
		public string AudioDevice { get; private set; }

		/// <summary>
		/// Audio channels
		/// </summary>
		public decimal AudioChannels { get; private set; }

		/// <summary>
		/// Audio input volume
		/// </summary>
		public decimal AudioInputVolume { get; private set; }

		/// <summary>
		/// Framerate
		/// </summary>
		public decimal Framerate { get; private set; }

		/// <summary>
		/// Width
		/// </summary>
		public decimal Width { get; private set; }

		/// <summary>
		/// Height
		/// </summary>
		public decimal Height { get; private set; }

		/// <summary>
		/// Video codec Id
		/// </summary>
		public string VideoCodecId { get; private set; }

		/// <summary>
		/// Video data rate
		/// </summary>
		public decimal VideoDataRate { get; private set; }

		/// <summary>
		/// Audio sample rate
		/// </summary>
		public decimal AudioSampleRate { get; private set; }

		/// <summary>
		/// Audio codec Id
		/// </summary>
		public string AudioCodecId { get; private set; }

		/// <summary>
		/// Audio data rate
		/// </summary>
		public decimal AudioDataRate { get; private set; }

		/// <summary>
		/// Bitrate - sum of VideoDataRate and AudioDataRate
		/// </summary>
		public decimal Bitrate {
			get { return VideoDataRate + AudioDataRate; }
		}

		/// <summary>
		/// List of errors
		/// </summary>
		private IList<string> errors = new List<string>();

		/// <summary>
		/// List of errors
		/// </summary>
		public IList<string> Errors {
			get { return new ReadOnlyCollection<string>(errors);}
		}

		#endregion

		#region Constructors and Init

		/// <summary>
		/// Private constructor
		/// </summary>
		private ResInfo() {}

		#endregion

		#region Methods

		/// <summary>
		/// Factiry method that creates ResInfo from an output text generated by FFmpeg application.
		/// </summary>
		/// <param name="output">output text generated by FFmpeg application</param>
		/// <returns>ResInfo object with information</returns>
		public static ResInfo Create(string output) {
			ResInfo resInfo = new ResInfo();

			if(string.IsNullOrEmpty(output)) {
				resInfo.errors.Add("Not FFmpeg output text.");
			}

			if (output.Contains("Problem accessing the DNS")) {
				resInfo.errors.Add("Problem accessing the DNS.");
			}

			if(output.Contains("Closing connection: NetStream.Play.StreamNotFound")) {
				resInfo.errors.Add("Closing connection: NetStream.Play.StreamNotFound");
			}

			if(output.Contains("Problem accessing the DNS.")){
				resInfo.errors.Add("Problem accessing the DNS.");
			}

			if (output.Contains("No such file or directory")) {
				resInfo.errors.Add("No such file or directory.");
			}

			

			string startString = "Metadata:" + Environment.NewLine;
			string endString = "[";
			int startIndex = output.IndexOf(startString, StringComparison.Ordinal) + startString.Length;
			int endIndex = output.Substring(startIndex).IndexOf(endString, StringComparison.Ordinal) - Environment.NewLine.Length;
			if(startIndex >= 0 && endIndex > startIndex) {
				string[] lines = Regex.Split(output.Substring(startIndex, endIndex), Environment.NewLine);
				foreach (var line in lines) {
					var result = Regex.Match(line.Trim(), @"(\w+)[\s]{2,}(.+)");
					var key = result.Groups[1].Value;
					var value = result.Groups[2].Value;

					switch (key) {
						case "author":
							resInfo.Author = value;
							break;
						case "copyright":
							resInfo.Copyright = value;
							break;
						case "description":
							resInfo.Description = value;
							break;
						case "keywords":
							resInfo.Keywords = value;
							break;
						case "rating":
							resInfo.Rating = value;
							break;
						case "title":
							resInfo.Title = value;
							break;
						case "presetname":
							resInfo.PresetName = value;
							break;
						case "creationdate":
							resInfo.CreationDate = value;
							break;
						case "videodevice":
							resInfo.VideoDevice = value;
							break;
						case "framerate":
							resInfo.Framerate = Decimal.Parse(value, CultureInfo.InvariantCulture);
							break;
						case "width":
							resInfo.Width = Decimal.Parse(value, CultureInfo.InvariantCulture);
							break;
						case "height":
							resInfo.Height = Decimal.Parse(value, CultureInfo.InvariantCulture);
							break;
						case "videocodecid":
							resInfo.VideoCodecId = value;
							break;
						case "videodatarate":
							resInfo.VideoDataRate = Decimal.Parse(value, CultureInfo.InvariantCulture);
							break;
						case "avclevel":
							resInfo.AvcLevel = Decimal.Parse(value, CultureInfo.InvariantCulture);
							break;
						case "avcprofile":
							resInfo.AvcProfile = Decimal.Parse(value, CultureInfo.InvariantCulture);
							break;
						case "audiodevice":
							resInfo.AudioDevice = value;
							break;
						case "audiosamplerate":
							resInfo.AudioSampleRate = Decimal.Parse(value, CultureInfo.InvariantCulture);
							break;
						case "audiochannels":
							resInfo.AudioChannels = Decimal.Parse(value, CultureInfo.InvariantCulture);
							break;
						case "audioinputvolume":
							resInfo.AudioInputVolume = Decimal.Parse(value, CultureInfo.InvariantCulture);
							break;
						case "audiocodecid":
							resInfo.AudioCodecId = value;
							break;
						case "audiodatarate":
							resInfo.AudioDataRate = Decimal.Parse(value, CultureInfo.InvariantCulture);
							break;
						default:
							break;
					}

				}
			}

			return resInfo;
		}

		#endregion

	}
}
